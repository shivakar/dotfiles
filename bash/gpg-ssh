#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# GnuPG, SSH Setup
#-------------------------------------------------------------------------------
# reset_gpg_agent starts/restart gpg-agent with SSH support
# Note: this function kills any existing gpg-agent or ssh-agent instances
function reset_gpg_agent() {
    pkill ssh-agent
    pkill gpg-agent
    unset SSH_AGENT_PID
    rm -f ${HOME}/.ssh-agent-info
    unset SSH_AUTH_SOCK
    echo "Starting gpg-agent"
    eval $(gpg-agent --daemon --enable-ssh-support \
        --write-env-file ${HOME}/.gpg-agent-info)
    GPG_AGENT_PID=$(pgrep gpg-agent)
    export GPG_AGENT_PID
}

# reset_ssh_agent starts/restarts ssh-agent
# Note: this function kills any existing gpg-agent or ssh-agent instances
function reset_ssh_agent() {
    pkill ssh-agent
    pkill gpg-agent
    unset GPG_AGENT_INFO
    unset GPG_AGENT_PID
    unset SSH_AUTH_SOCK
    rm -f ${HOME}/.gpg-agent-info
    rm -f ${HOME}/.ssh-agent-info
    echo "Starting ssh-agent"
    # Force identity expiration in 8 hours
    ssh-agent -t 8h > ${HOME}/.ssh-agent-info
    source ${HOME}/.ssh-agent-info
}

# Source ssh-agent or gpg-agent info if they are running
SSH_AGENT_PID=$(pgrep ssh-agent)
GPG_AGENT_PID=$(pgrep gpg-agent)
# Source SSH agent info if applicable
if [ ! -z "$SSH_AGENT_PID" -a -f ${HOME}/.ssh-agent-info ]; then
    source ${HOME}/.ssh-agent-info
fi

# Source GPG agent info if applicable
if [ ! -z "$GPG_AGENT_PID" -a -f ${HOME}/.gpg-agent-info ]; then
    source ${HOME}/.gpg-agent-info
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK

    # Set GPG TTY
    GPG_TTY=$(tty)
    export GPG_TTY
fi
