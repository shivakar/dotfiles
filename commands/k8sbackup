#!/usr/bin/env zsh

# Description: Backup k8s resources in the current namespace to a file
# Usage: k8sbackup

# Confirm the cluster context is the correct one (y/n)
CURRENT_CONTEXT=$(kubectl config current-context)
echo "Cluster: $CURRENT_CONTEXT"
read -q "REPLY?Is this the cluster you want to backup? (y/n) "
if [[ $REPLY != "y" ]]; then
  echo "Please switch to the correct context and try again"
  exit 1
fi
print "\n"

# Confirm that the current namespace is the one you want to backup (y/n)
CURRENT_NAMESPACE=$(kubectl config view --minify --output 'jsonpath={..namespace}')
echo "Namespace: $CURRENT_NAMESPACE"
read -q "REPLY?Is this the namespace you want to backup? (y/n) "
if [[ $REPLY != "y" ]]; then
  echo "Please switch to the correct namespace and try again"
  exit 1
fi
print "\n"

# Confirm that the current directory is the one you want to backup to (y/n)
CURRENT_DIR=$(pwd)
echo "Current directory: $CURRENT_DIR"
read -q "REPLY?Is this the directory you want to backup to? (y/n) "
if [[ $REPLY != "y" ]]; then
  echo "Please switch to the correct directory and try again"
  exit 1
fi
print "\n"

# List of resources to backup with their file extensions
declare -A RESOURCES=(
  [configmaps]=cm
  [cronjobs]=cronjob
  [daemonsets]=daemonset
  [deployments]=deploy
  [ingresses]=ing
  [jobs]=job
  [rolebindings]=rolebinding
  [roles]=role
  [secrets]=secret
  [serviceaccounts]=sa
  [services]=svc
  [statefulsets]=ss
  [storageclasses]=sc
)

# For each resource, get the list of resources, fetch the yaml for each resource, and save it to a file
for resource in "${(@k)RESOURCES}"; do
  echo "Backing up $resource"
  for name in $(kubectl get "$resource" -n "$CURRENT_NAMESPACE" -o 'jsonpath={.items[*].metadata.name}'); do
    echo "  $name >> $name.${RESOURCES[$resource]}.yaml"
    kubectl get "$resource" "$name" -n "$CURRENT_NAMESPACE" -o yaml | kubectl neat > "$CURRENT_DIR/$name.${RESOURCES[$resource]}.yaml"
  done
done

# List the files created
ls -l *.yaml

echo "Backup completed at $(date)"
